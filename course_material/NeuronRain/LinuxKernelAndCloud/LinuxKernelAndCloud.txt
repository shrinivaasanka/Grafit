##############################################################################################################################################
<a rel="license" href="http://creativecommons.org/licenses/by-nc-nd/4.0/"><img alt="Creative Commons Licence" style="border-width:0" src="https://i.creativecommons.org/l/by-nc-nd/4.0/88x31.png" /></a><br />This work is licensed under a <a rel="license" href="http://creativecommons.org/licenses/by-nc-nd/4.0/">Creative Commons Attribution-NonCommercial-NoDerivatives 4.0 International License</a>.
##############################################################################################################################################
Course Authored By:
-----------------------------------------------------------------------------------------------------------
Srinivasan Kannan
(also known as: Shrinivaasan Kannan, Shrinivas Kannan)
Ph: 9791499106, 9003082186
Krishna iResearch Open Source Products Profiles:
http://sourceforge.net/users/ka_shrinivaasan,
https://github.com/shrinivaasanka,
https://www.openhub.net/accounts/ka_shrinivaasan
Personal website(research): https://sites.google.com/site/kuja27/
emails: ka.shrinivaasan@gmail.com, shrinivas.kannan@gmail.com,
kashrinivaasan@live.com
-----------------------------------------------------------------------------------------------------------
##############################################################################################################################################

This is a non-linearly organized, continually updated set of course notes on Linux Kernel and Cloud 
and supplements NeuronRain USBmd, VIRGO Linux and KingCobra Design Notes in:
------------------------------------------------
NeuronRain Enterprise Version Design Documents:
------------------------------------------------
USBmd USB and WiFi network analytics - https://github.com/shrinivaasanka/usb-md-github-code/blob/master/USBmd_notes.txt

VIRGO Linux - https://github.com/shrinivaasanka/virgo-linux-github-code/blob/master/virgo-docs/VirgoDesign.txt

KingCobra Kernelspace Messaging - https://github.com/shrinivaasanka/kingcobra-github-code/blob/master/KingCobraDesignNotes.txt
----------------------------------------------
NeuronRain Research Version Design Documents:
----------------------------------------------
USBmd USB and WiFi network analytics - https://sourceforge.net/p/usb-md/code-0/HEAD/tree/USBmd_notes.txt

VIRGO Linux - https://sourceforge.net/p/virgo-linux/code-0/HEAD/tree/trunk/virgo-docs/VirgoDesign.txt

KingCobra Kernelspace Messaging - https://sourceforge.net/p/kcobra/code-svn/HEAD/tree/KingCobraDesignNotes.txt
-----------------------------------------------------------------------------------------------------------------------------------
17 March 2017
-----------------------------------------------------------------------------------------------------------------------------------
VIRGO Linux Kernel Build Steps
-------------------------------
VIRGO Linux kernel is an overlay of VIRGO codebase on kernel mainline (presently 4.1.5) source tree. Building a custom kernel for VIRGO
is required for building new system calls and kernel modules in it. Shell script for builing kernel mainline is in:
	https://github.com/shrinivaasanka/virgo-linux-github-code/blob/master/buildscript_4.1.5.sh
	https://sourceforge.net/p/virgo-linux/code-0/HEAD/tree/trunk/buildscript_4.1.5.sh

VIRGO Linux kernel has following new system calls:
--------------------------------------------------
Cloud RPC system call:
	virgo_clone()
Cloud Kernel Memory Cache (kernelspace equivalent of memcache):
	virgo_malloc()
	virgo_get()
	virgo_set()
	virgo_free()
Cloud File System:
	virgo_open()
	virgo_close()
	virgo_read()
	virgo_write()

VIRGO Linux kernel has following new kernel modules (kernelsocket listeners) corresponding to previous system call clients:
---------------------------------------------------------------------------------------------------------------------------
1. cpupooling virtualization - VIRGO_clone() system call and VIRGO cpupooling driver by which a remote procedure can be invoked in kernelspace.(port: 10000)
2. memorypooling virtualization - VIRGO_malloc(), VIRGO_get(), VIRGO_set(), VIRGO_free() system calls and VIRGO memorypooling driver by which kernel memory can be allocated in remote node, written to, read and freed - A kernelspace memcache-ing.(port: 30000)
3. filesystem virtualization - VIRGO_open(), VIRGO_read(), VIRGO_write(), VIRGO_close() system calls and VIRGO cloud filesystem driver by which file IO in remote node can be done in kernelspace.(port: 50000)
4. config - VIRGO config driver for configuration symbols export.
5. queueing - VIRGO Queuing driver kernel service for queuing incoming requests, handle them with workqueue and invoke KingCobra service routines in kernelspace. (port: 60000)
6. cloudsync - kernel module for synchronization primitives (Bakery algorithm etc.,) with exported symbols that can be used in other VIRGO cloud modules for critical section lock() and unlock()
7. utils - utility driver that exports miscellaneous kernel functions that can be used across VIRGO Linux kernel
8. EventNet - eventnet kernel driver to vfs_read()/vfs_write() text files for EventNet vertex and edge messages (port: 20000)
9. Kernel_Analytics - kernel module that reads machine-learnt config key-value pairs set in /etc/virgo_kernel_analytics.conf. Any machine learning software can be used to get the key-value pairs for the config. This merges three facets - Machine Learning, Cloud Modules in VIRGO Linux-KingCobra-USBmd , Mainline Linux Kernel
10. SATURN program analysis wrapper driver.
and userspace test cases for the above.

Prerequisites for building VIRGO Linux kernel are similar to mainline kernel:
apt install libncurses5-dev gcc make git exuberant-ctags bc libssl-dev

Presently VIRGO kernel is 32-bit. Building 64 bit linux kernel requires long mode CPU flag (lm) in /proc/cpuinfo. Also booting a 64 bit kernel built on 32 bit kernel could cause init to fail as "init not found". This is because init is a symbolic link to systemd binary when kernel boots up which is 32-bit and not 64-bit. For this menuconfig in Kbuild provides IA32 Emulation config parameter.

Booting a custom kernel could also cause partition issues while grub is updated sometimes with error "no such partition" and could drop to grub rescue> prompt. This can be remedied by:
	1. grub rescue> ls
which lists the partitions in format (hd0, msdos<#number>)
	2. grub rescue> set root=(hd0, msdos<#number>) {for each such partition}
	3. grub rescue> set prefix=(hd0, msdos<#number>)/boot/grub
	4. grub rescue> insmod normal
	5. grub rescue> normal
which boots grub normally. This has to be persisted with:
	6. update-grub2
	7. grub-install /dev/sda
on reboot

Some grub errors can be debugged by adding kernel boot parameters in /boot/grub/grub.cfg or at boot time edit of the entry with "... $vt_handoff". Appending options "debug init=<path-to-systemd>" to this line might help.

Sometimes repetitive builds and grub updates also cause a rare file system corruption as below which causes root shell drop:
	ALERT! <diskid> does not exist
	Boot args (cat /proc/cmdline)
	- Check rootdelay
	- Check root
	Missing modules (cat /proc/modules, ls /dev)
	Dropping to root shell
	(initramfs)
This is remedied by:
	(initramfs) modprobe dm-mod
	(initramfs) lvm
	lvm> vgchange -ay
	lvm> exit
	(initramfs) exit
followed by:
	mount -o remount,rw /dev/sda<number> <mount_point_directory>

Complete documentation of VIRGO Linux with Design Documents is in:
https://github.com/shrinivaasanka/virgo-linux-github-code/tree/master/virgo-docs/
https://sourceforge.net/p/virgo-linux/code-0/HEAD/tree/trunk/virgo-docs/

--------------------------------------------------------------------------------------------
20 March 2017
--------------------------------------------------------------------------------------------
VIRGO Linux 64 bit build - continued:

*) After configuring IA32 simulation and a successful build, there could still be initramfs errors
because of i915 drivers mismatch as below:
	"Possible missing firmware --------- for i915"
*) Previous error requires installation of latest linux i915 graphics drivers (though there may not be a matching hardware for it) listed in https://01.org/linuxgraphics/downloads/firmware: for Kabylake, Skylake, Broxton graphics processors
*) update-initramfs has to be done again for correct /boot initrd image to be created for 4.10.3 after updating i915 drivers previously listed
*) In some cases image may be hidden in grub boot menu. For this an already available boot-repair tool scans the /boot images and reinstalls grub menu.
*) On successful 64 bit build, uname -a should have x86_64 as below:
Linux kashrinivaasan-Inspiron-1545 4.10.3 #1 SMP Fri Mar 17 18:30:40 IST 2017 x86_64 x86_64 x86_64 GNU/Linux
 
