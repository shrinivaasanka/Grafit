/*
##############################################################################################################################################
#<a rel="license" href="http://creativecommons.org/licenses/by-nc-nd/4.0/"><img alt="Creative Commons Licence" style="border-width:0" src="https://i.creativecommons.org/l/by-nc-nd/4.0/88x31.png" /></a><br />This work is licensed under a <a rel="license" href="http://creativecommons.org/licenses/by-nc-nd/4.0/">Creative Commons Attribution-NonCommercial-NoDerivatives 4.0 International License</a>.
###############################################################################################################################################
#Course Authored By:
#-----------------------------------------------------------------------------------------------------------
#K.Srinivasan
#NeuronRain Documentation and Licensing: http://neuronrain-documentation.readthedocs.io/en/latest/
#Personal website(research): https://acadpdrafts.readthedocs.io/en/latest/ 
#-----------------------------------------------------------------------------------------------------------
##############################################################################################################################################
*/

This is a non-linearly organized, code puzzles oriented, continually updated set of course notes on Go language dedicated to concurrency-safe rapid webservices application development. 
------------------------------------------------------------------------------------------------------------------------------
1382. (THEORY and FEATURE) String Analytics - String reversals by XOR swap algorithm - Multiple return values within a Go function, Goroutines and Gochannels for synchronization - related to 1380 and all sections on String analytics
------------------------------------------------------------------------------------------------------------------------------
Code fragment multiplereturns.go defines 2 functions implementing XOR swap algorithm - https://en.wikipedia.org/wiki/XOR_swap_algorithm - each returning 2 values (departure from conventional wisdom) for swapping contents on 2 variables without necessity of third variable by three bitwise XORs:
	x1 = x1 XOR x2
	x2 = x1 XOR x2
	x1 = x1 XOR x2
Function xor_swap() is invoked as normal Go function while xor_swap_goroutine() is a goroutine (a separate thread is created for function) and return values are sent by Channel IPC or ITC synchronization primitives and received by caller - Logs logs/multiplereturns.log.24January2023 capture the execution of function and goroutine versions in quick succession swapping variable values in x1 and x2 and again restoring the original values in x1 and x2. XOR swap is best suited for following string reversal optimization as usual reverse() is of runtime equal to length of the string and involves use of a stack (N pushes and N pops):
	N = length of string S (even number)
	for i=1 to N/2 
	{
		XOR swap S[i] and S[N-i]
	}
Algorithm earlier reverses a string in N/2 steps in place without additional storage and case of odd length strings is trivial as middle character need not be reversed.

References:
----------
1.XOR swap algorithm and zero injection attack in RC4 cipher - [Schneier on Security] - https://www.schneier.com/blog/archives/2008/06/underhanded_imp.html 

